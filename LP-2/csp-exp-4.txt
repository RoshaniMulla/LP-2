class NQueens:
    def __init__(self, n):
        self.n = n
        self.board = [[0] * n for _ in range(n)]

    def solve(self):
        if not self.solve_backtracking(0):
            print("No solution exists.")
            return False
        self.print_solution()
        return True

    def solve_backtracking(self, col):
        if col >= self.n:
            return True

        for row in range(self.n):
            if self.is_safe(row, col):
                self.board[row][col] = 1

                if self.solve_backtracking(col + 1):
                    return True

                self.board[row][col] = 0

        return False

    def is_safe(self, row, col):
        # Check row
        for c in range(col):
            if self.board[row][c] == 1:
                return False

        # Check upper diagonal
        i, j = row, col
        while i >= 0 and j >= 0:
            if self.board[i][j] == 1:
                return False
            i -= 1
            j -= 1

        # Check lower diagonal
        i, j = row, col
        while i < self.n and j >= 0:
            if self.board[i][j] == 1:
                return False
            i += 1
            j -= 1

        return True

    def print_solution(self):
        for row in self.board:
            print(' '.join('Q' if cell == 1 else '-' for cell in row))


# Take user input for board size
n = int(input("Enter the board size (N): "))

# Create NQueens object and solve
queens = NQueens(n)
print("Solution found using backtracking algorithm:" if queens.solve() else "No solution found.")
